//
// Example library for Lab 1
// Allows to calculate entropy of file or its part
//
// gcc -shared -fPIC libavgN0000.c -o libavgN0000.so -ldl -lm
//
//  (c) Alexei Guirik, 2021
//  This source is licensed under CC BY-NC 4.0
//  (https://creativecommons.org/licenses/by-nc/4.0/)
//  

// file option 1

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <sys/mman.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>
#include <errno.h>
#include <dirent.h>

#include "plugin_api.h"


static char *g_lib_name = "libavg.so";

static char *g_plugin_purpose = "Check type of file in format ELF, PE32, a.out, COFF";

static char *g_plugin_author = "Tran Van Hoang";

#define OPT_EXE "exe"
int count_tmp = 0;

static struct plugin_option g_po_arr[] = {
/*
    struct plugin_option {
        struct option {
           const char *name;
           int         has_arg;
           int        *flag;
           int         val;
        } opt,
        char *opt_descr
    }
*/
    {
        {
            OPT_EXE,
            required_argument,
            0, 0,
        },
        "find file with type as input value"
    },
    
};



//
//  Private functions
//

struct list_file_in_dir{
    char *file_name;
    char *type;
};
void find_lb(const char* basepath);
// list file
static struct list_file_in_dir list_file[100];

// length option
static int g_po_arr_len = sizeof(g_po_arr)/sizeof(g_po_arr[0]);

// find type of file
static void check_type_file(int count_tmp, const char *dirname); 

//
//  API functions
//
int plugin_get_info(struct plugin_info* ppi) {
    if (!ppi) {
        fprintf(stderr, "ERROR: invalid argument\n");
        return -1;
    }
    
    ppi->plugin_purpose = g_plugin_purpose;
    ppi->plugin_author = g_plugin_author;
    ppi->sup_opts_len = g_po_arr_len;
    ppi->sup_opts = g_po_arr;
    return 0;
}

static char *input_type = NULL;
int plugin_process_file(const char *dirname,
        struct option in_opts[],
        size_t in_opts_len) {
    // Return error by default
    int ret = -1;

    //fprintf(stdout, "CHECK!!!\n");
    // Pointer to file mapping
    unsigned char *ptr = NULL;
    
    char *DEBUG = getenv("LAB1DEBUG");
    
    if (!dirname || !in_opts || !in_opts_len) {
        errno = EINVAL;
        return -1;
    }
    
    if (DEBUG) {
        for (size_t i = 0; i < in_opts_len; i++) {
            fprintf(stderr, "DEBUG: %s: Got option '%s' with arg '%s'\n",
                g_lib_name, in_opts[i].name, (char*)in_opts[i].flag);
        }
    }
    
    int got_input_type = 0;
    int tmp_type = 0;
// #define OPT_CHECK(opt_var, is_double) \
//     if (got_##opt_var) { \
//         if (DEBUG) { \
//             fprintf(stderr, "DEBUG: %s: Option '%s' was already supplied\n", \
//                 g_lib_name, in_opts[i].name); \
//         } \
//         errno = EINVAL; \
//         return -1; \
//     } \
//     else { \
//         char *endptr = NULL; \
//         opt_var = is_double ? \
//                     strtod((char*)in_opts[i].flag, &endptr): \
//                     strtol((char*)in_opts[i].flag, &endptr, 0); \
//         if (*endptr != '\0') { \
//             if (DEBUG) { \
//                 fprintf(stderr, "DEBUG: %s: Failed to convert '%s'\n", \
//                     g_lib_name, (char*)in_opts[i].flag); \
//             } \
//             errno = EINVAL; \
//             return -1; \
//         } \
//         got_##opt_var = 1; \
//     }
#define OPT_CHECK(opt_var, tmp_type) \
    if (got_##opt_var) { \
        if (DEBUG) { \
            fprintf(stderr, "DEBUG: %s: Option '%s' was already supplied\n", \
                g_lib_name, in_opts[i].name); \
        } \
        errno = EINVAL; \
        return -1; \
    } \
    else { \
        char *endptr = NULL; \
        tmp_type = strtol((char*)in_opts[i].flag, &endptr, 10); \
        if(tmp_type!=0){\
        	if (DEBUG) { \
                	fprintf(stderr, "DEBUG: %s: Failed to convert '%s'\n", \
                    	g_lib_name, (char*)in_opts[i].flag); \
            	} \
            	errno = EINVAL; \
            	return -1; \
        }\
        opt_var=endptr; \
        got_##opt_var = 1; \
    }
    
    for (size_t i = 0; i < in_opts_len; i++) {
        if (!strcmp(in_opts[i].name, OPT_EXE)) {
            OPT_CHECK(input_type, tmp_type)
        }
        else {
            errno = EINVAL;
            return -1;
        }
    }
    
    if (input_type!=NULL) {
        if (DEBUG) {
            fprintf(stderr, "DEBUG: %s: Input type value was not supplied.\n",
                g_lib_name);
        }
        errno = EINVAL;
        return -1;
    }
    
    // // Entropy value should be in [0.0 .. 1.0)
    // if (entropy < 0 || entropy > 1.0) {
    //     if (DEBUG) {
    //         fprintf(stderr, "DEBUG: %s: Entropy should be in [0.0 .. 1.0)\n",
    //             g_lib_name);
    //     }
    //     errno = ERANGE;
    //     return -1;
    // }
    
    if (DEBUG) {
        fprintf(stderr, "DEBUG: %s: Inputs: type file = %s \n",
            g_lib_name, input_type);
    }
    printf(stderr, "DEBUG: : dsadsadasdGot option ''"); 
    find_lb(dirname);
    
    
//    // вызывать функцию для выполнения опции 1
//     handle_op1_lines_count( count_tmp, dirname);
    
   // вызывать функцию для выполнения опции 2
    if(input_type!=NULL){
       check_type_file(count_tmp, dirname);
	}
    return ret=1;
}        
void find_lb(const char* basepath){
    DIR* FD;
    struct dirent* in_file;
    FILE* entry_file;
    char buffer[BUFSIZ];
    if (NULL == (FD = opendir (basepath))) 
    {

	errno = EINVAL;
        return ;
    }  
    int count=0;
    char c; 

    while ((in_file = readdir(FD))!=NULL) 
    {

        if (!strcmp (in_file->d_name, "."))
            continue;
        if (!strcmp (in_file->d_name, ".."))    
            continue;
        //fprintf(stderr, "%s\n",in_file->d_name);
        char path[100] ;
        strcpy(path,basepath);
        strcat(path,"/");
        char *src = in_file->d_name;
		strcat(path, src);

        unsigned char* magic[4];
        entry_file = fopen(path, "rb");
        fread(magic,1,4,entry_file);
        if (magic[0] == "1111111" && magic[1] == "1000101" && magic[2] == "1001100" && magic[3] == "1000110") {
            count_tmp++;
            list_file[count_tmp].file_name = in_file->d_name;
            list_file[count_tmp].type = "elf";
        }
        else if (magic[0] == "1011" && magic[1] == "00000001") {
            count_tmp++;
            list_file[count_tmp].file_name = in_file->d_name;
            list_file[count_tmp].type = "pe32";
        }
        else if (magic[0] == "1001100" && magic[1] == "00000001") {
            count_tmp++;
            list_file[count_tmp].file_name = in_file->d_name;
            list_file[count_tmp].type = "coff";
        }
        else if ((magic[0] == "100" && magic[1] == "00010000")||(magic[0] == "100" && magic[2] == "00010011")) {
            count_tmp++;
            list_file[count_tmp].file_name = in_file->d_name;
            list_file[count_tmp].type = "a.out";
        }
        else {
            count_tmp++;
            list_file[count_tmp].file_name = in_file->d_name;
            list_file[count_tmp].type = "other type";
        }
        find_lb(path);
        
        fclose(entry_file);
    }
    closedir(FD);
}

void check_type_file(int count_tmp, const char *dirname) {

    char *list_file_out[count_tmp];
    int count = 0;
    if (strstr(input_type, "elf") != NULL) {
        
        list_file_out[1] = NULL;
        for (int i=1; i < count_tmp; i++) {
            if (list_file[i].type == "elf") {
                count++;
                list_file_out[count] = list_file[i].file_name;
            }
        }
    }
    if (strstr(input_type, "pe32") != NULL) {
        
        list_file_out[1] = NULL;
        for (int i=1; i < count_tmp; i++) {
            if (list_file[i].type == "pe32") {
                count++;
                list_file_out[count] = list_file[i].file_name;
            }
        }
    }
    if (strstr(input_type, "coff") != NULL) {
        
        list_file_out[1] = NULL;
        for (int i=1; i < count_tmp; i++) {
            if (list_file[i].type == "coff") {
                count++;
                list_file_out[count] = list_file[i].file_name;
            }
        }
    }
    if (strstr(input_type, "a.out") != NULL) {
       
        list_file_out[1] = NULL;
        for (int i=1; i < count_tmp; i++) {
            if (list_file[i].type == "a.out") {
                count++;
                list_file_out[count] = list_file[i].file_name;
            }
        }
    }
    if (list_file_out[1]==NULL) {
        fprintf(stderr, "There are no files in the directore '%s' in formats %s\n", dirname, input_type);
    }
    else {
        fprintf(stderr, "File in directory '%s' in formats %s: \n", dirname, input_type);
        for (int i=1;i<=count;i++) {
            fprintf(stderr, "%s\n", list_file_out[i]);
        }
    }
}
