
//
// gcc -shared -fPIC libavgN0000.c -o libavgN0000.so -ldl -lm
//

// file option 2


#include <ctype.h>
#include <stdbool.h>

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <sys/mman.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>
#include <errno.h>
#include <time.h>
#include <dirent.h>

#include "plugin_api.h"


static char *g_lib_name = "lib2.so";

static char *g_plugin_purpose = "Find all file with size smaller than input size";

static char *g_plugin_author = "Tran Van Hoang";

#define OPT_size "size"

static struct plugin_option g_po_arr[] = {
/*
    struct plugin_option {
        struct option {
           const char *name;
           int         has_arg;
           int        *flag;
           int         val;
        } opt,
        char *opt_descr
    }
*/
    {
        {
            OPT_size,
            required_argument,
            0, 0,
        },
        "Find all file with size smaller than input siz"
    }
    
    
};


static int g_po_arr_len = sizeof(g_po_arr)/sizeof(g_po_arr[0]);

//
static void check_size(int count_comp, const char *dirname);
//

static char *list_smaller_size[50];
int plugin_get_info(struct plugin_info* ppi) {
    if (!ppi) {
        fprintf(stderr, "ERROR: invalid argument\n");
        return -1;
    }
    
    ppi->plugin_purpose = g_plugin_purpose;
    ppi->plugin_author = g_plugin_author;
    ppi->sup_opts_len = g_po_arr_len;
    ppi->sup_opts = g_po_arr;
    
    return 0;
}

static int input_size = 0;
int plugin_process_file(const char *dirname,
        struct option in_opts[],
        size_t in_opts_len) {

    // Return error by default	
    int ret = -1;		// Это должно быть, но в данном случае без этого можно обойтись. В ваших лабораторных эта строка быть должна!
    
    // Pointer to file mapping
    //unsigned char *ptr = NULL;  //Тоже нужная строчка - при правильной реализации (с точки зрения задания).
    
    char *DEBUG = getenv("LAB1DEBUG");
    
    if (!dirname || !in_opts || !in_opts_len) {
        errno = EINVAL;
        return -1;
    }
    
    if (DEBUG) {
        for (size_t i = 0; i < in_opts_len; i++) {
            fprintf(stderr, "DEBUG: %s: Got option '%s' with arg '%s'\n",
                g_lib_name, in_opts[i].name, (char*)in_opts[i].flag);
        }
    }
    
    int got_input_size = 0;
    int saved_errno = 0;
    
    #define OPT_CHECK(opt_var) \
    if (got_##opt_var) { \
        if (DEBUG) { \
            fprintf(stderr, "DEBUG: %s: Option '%s' was already supplied\n", \
                g_lib_name, in_opts[i].name); \
        } \
        errno = EINVAL; \
        return -1; \
    } \
    else { \
        char *endptr = NULL; \
        opt_var = strtol((char*)in_opts[i].flag, &endptr, 10); \
        if (strcmp(endptr,"")!=0) { \
            	if (DEBUG) { \
                	fprintf(stderr, "DEBUG: %s: Failed to convert '%s'\n", \
                  	g_lib_name, (char*)in_opts[i].flag); \
            	} \
            	errno = EINVAL; \
            	return -1; \
       } \
        got_##opt_var = 1; \
    }
    for (size_t i = 0; i < in_opts_len; i++) {
        if (!strcmp(in_opts[i].name, OPT_size)) {
            OPT_CHECK(input_size)
        }
	else {
            errno = EINVAL;
            return -1;
        }
    }
    
    if (!got_input_size) {
        if (DEBUG) {
            fprintf(stderr, "DEBUG: %s: The input size value was not supplied.\n",
                g_lib_name);
        }
        errno = EINVAL;
        return -1;
    }
    
    if (input_size <= 0) {
        if (DEBUG) {
            fprintf(stderr, "DEBUG: %s: Size should be >= 1!\n",
                g_lib_name);
        }
        errno = ERANGE;
        return -1;
    }
    
    if (DEBUG) {
        fprintf(stderr, "DEBUG: %s: Inputs: Input size = %d\n", g_lib_name, input_size);
    }
// открыть входной каталог
    DIR* FD;
    struct dirent* in_file;
    FILE    *entry_file;
    char    buffer[BUFSIZ];
    if (NULL == (FD = opendir (dirname))) 
    {
        fprintf(stderr, "Error : Failed to open input directory - %s\n", strerror(errno));
	    errno = EINVAL;
        return -1;
    }   
   
    int count_tmp = 0; 
    while ((in_file = readdir(FD))) 
    {
    
        if (!strcmp (in_file->d_name, "."))
            continue;
        if (!strcmp (in_file->d_name, ".."))    
            continue;
        //fprintf(stderr, "%s\n",in_file->d_name);
        char dest[50] = "file_test/";
        char *src = in_file->d_name;
	    strcat(dest, src);
        
        entry_file = fopen(dest,  "rb");
        fseek(entry_file, 0L, SEEK_END);
        long int res = ftell(entry_file);
        if (res<input_size) {
            count_tmp++;
            list_smaller_size[count_tmp] = in_file->d_name;
        }
    }
    fclose(entry_file);

    closedir(FD);

    check_size(count_tmp, dirname);

    return ret=1;
}

void check_size(int count_tmp, const char *dirname) {

    if (count_tmp == 0) {
        fprintf(stderr, "There are no files in this directory '%s' with size smaller than %d \n", dirname, input_size);
    }
    else {
        fprintf(stderr, "In this directory '%s' have files with size smaller than %d \n. There are: ", dirname, input_size);
        for (int i=1; i<=count_tmp; i++) {
            fprintf(stderr,"%s\n", list_smaller_size[i]);
        }
    }
}

        











